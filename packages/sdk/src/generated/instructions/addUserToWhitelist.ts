/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category AddUserToWhitelist
 * @category generated
 */
export interface AddUserToWhitelistInstructionArgs {
  amount: beet.bignum
}
/**
 * @category Instructions
 * @category AddUserToWhitelist
 * @category generated
 */
export const addUserToWhitelistStruct = new beet.BeetArgsStruct<
  AddUserToWhitelistInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['amount', beet.u64],
  ],
  'AddUserToWhitelistInstructionArgs',
)
/**
 * Accounts required by the _addUserToWhitelist_ instruction
 *
 * @property [_writable_, **signer**] authority
 * @property [] manager
 * @property [_writable_] user
 * @property [] userWallet
 * @category Instructions
 * @category AddUserToWhitelist
 * @category generated
 */
export interface AddUserToWhitelistInstructionAccounts {
  authority: web3.PublicKey
  manager: web3.PublicKey
  user: web3.PublicKey
  userWallet: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const addUserToWhitelistInstructionDiscriminator = [
  244, 177, 124, 12, 22, 50, 139, 152,
]

/**
 * Creates a _AddUserToWhitelist_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category AddUserToWhitelist
 * @category generated
 */
export function createAddUserToWhitelistInstruction(
  accounts: AddUserToWhitelistInstructionAccounts,
  args: AddUserToWhitelistInstructionArgs,
  programId = new web3.PublicKey('BSP9GP7vACnCKxEXdqsDpGdnqMBafc6rtQozGwRkKqKH'),
) {
  const [data] = addUserToWhitelistStruct.serialize({
    instructionDiscriminator: addUserToWhitelistInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.manager,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.user,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.userWallet,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
