/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category AddUserToWhitelist
 * @category generated
 */
export const addUserToWhitelistStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'AddUserToWhitelistInstructionArgs'
)
/**
 * Accounts required by the _addUserToWhitelist_ instruction
 *
 * @property [_writable_, **signer**] authority
 * @property [] manager
 * @property [_writable_] user
 * @property [] userAuthority
 * @property [_writable_] whitelistedUserInfo
 * @property [_writable_] pair
 * @property [_writable_] tokenA
 * @property [_writable_] tokenB
 * @category Instructions
 * @category AddUserToWhitelist
 * @category generated
 */
export type AddUserToWhitelistInstructionAccounts = {
  authority: web3.PublicKey
  manager: web3.PublicKey
  user: web3.PublicKey
  userAuthority: web3.PublicKey
  whitelistedUserInfo: web3.PublicKey
  pair: web3.PublicKey
  tokenA: web3.PublicKey
  tokenB: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const addUserToWhitelistInstructionDiscriminator = [
  244, 177, 124, 12, 22, 50, 139, 152,
]

/**
 * Creates a _AddUserToWhitelist_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category AddUserToWhitelist
 * @category generated
 */
export function createAddUserToWhitelistInstruction(
  accounts: AddUserToWhitelistInstructionAccounts,
  programId = new web3.PublicKey('JDe51ZjpQ3tZzL6QTVPHt5VT5NzaDuJnrTmJJUFrC3vm')
) {
  const [data] = addUserToWhitelistStruct.serialize({
    instructionDiscriminator: addUserToWhitelistInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.manager,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.user,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.userAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.whitelistedUserInfo,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.pair,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenA,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenB,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
