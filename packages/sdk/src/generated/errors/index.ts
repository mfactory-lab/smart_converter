/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * Unauthorized: 'Unauthorized action'
 *
 * @category Errors
 * @category generated
 */
export class UnauthorizedError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'Unauthorized'
  constructor() {
    super('Unauthorized action')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UnauthorizedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new UnauthorizedError())
createErrorFromNameLookup.set('Unauthorized', () => new UnauthorizedError())

/**
 * IsPaused: 'Paused'
 *
 * @category Errors
 * @category generated
 */
export class IsPausedError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'IsPaused'
  constructor() {
    super('Paused')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IsPausedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new IsPausedError())
createErrorFromNameLookup.set('IsPaused', () => new IsPausedError())

/**
 * AlreadyResumed: 'Already resumed'
 *
 * @category Errors
 * @category generated
 */
export class AlreadyResumedError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'AlreadyResumed'
  constructor() {
    super('Already resumed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AlreadyResumedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new AlreadyResumedError())
createErrorFromNameLookup.set('AlreadyResumed', () => new AlreadyResumedError())

/**
 * StillRemainingLockedTokens: 'Pair still have locked tokens'
 *
 * @category Errors
 * @category generated
 */
export class StillRemainingLockedTokensError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'StillRemainingLockedTokens'
  constructor() {
    super('Pair still have locked tokens')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, StillRemainingLockedTokensError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1773,
  () => new StillRemainingLockedTokensError()
)
createErrorFromNameLookup.set(
  'StillRemainingLockedTokens',
  () => new StillRemainingLockedTokensError()
)

/**
 * IsBlocked: 'User is blocked'
 *
 * @category Errors
 * @category generated
 */
export class IsBlockedError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'IsBlocked'
  constructor() {
    super('User is blocked')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IsBlockedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new IsBlockedError())
createErrorFromNameLookup.set('IsBlocked', () => new IsBlockedError())

/**
 * AlreadyUnblocked: 'User is already unblocked'
 *
 * @category Errors
 * @category generated
 */
export class AlreadyUnblockedError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'AlreadyUnblocked'
  constructor() {
    super('User is already unblocked')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AlreadyUnblockedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new AlreadyUnblockedError())
createErrorFromNameLookup.set(
  'AlreadyUnblocked',
  () => new AlreadyUnblockedError()
)

/**
 * InsufficientLockedAmount: 'Insufficient locked amount'
 *
 * @category Errors
 * @category generated
 */
export class InsufficientLockedAmountError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'InsufficientLockedAmount'
  constructor() {
    super('Insufficient locked amount')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InsufficientLockedAmountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new InsufficientLockedAmountError())
createErrorFromNameLookup.set(
  'InsufficientLockedAmount',
  () => new InsufficientLockedAmountError()
)

/**
 * InsufficientFunds: 'Insufficient funds'
 *
 * @category Errors
 * @category generated
 */
export class InsufficientFundsError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'InsufficientFunds'
  constructor() {
    super('Insufficient funds')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InsufficientFundsError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new InsufficientFundsError())
createErrorFromNameLookup.set(
  'InsufficientFunds',
  () => new InsufficientFundsError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
